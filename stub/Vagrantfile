def private_network_ip(index)
  return "192.168.239." + (10 + index).to_s
end

class PTMachine
  attr_reader :name, :box, :ostype, :base_mac, :boot_timeout, :shell, :synctype, :vbmodifylist, :syncargs, :typed_syncargs
  def initialize(name, box, ostype)
    @name = name
    @box = box  # https://app.vagrantup.com/boxes/search
    @ostype = ostype
  end
  def with(var, value)
    self.instance_variable_set(var, value)
    return self
  end

  def mount_args()
    case @synctype
    when nil
      return {}
    when "disabled", "disable", "off", "no", "false", "0", 0
      return { disabled: true }
    end
    a = { type: @synctype }
    if @syncargs.nil? and (@typed_syncargs.nil? or not @typed_syncargs.has_key?(@synctype))
      # Here, our default options on a per-sync basis
      case @synctype
      when "nfs"
        a.merge!({nfs_udp: false})
      end
    else
      a.merge! @syncargs unless @syncargs.nil?
      a.merge! @typed_syncargs[@synctype] if @typed_syncargs.has_key?(@synctype)
    end
    return a
  end
end

# Most modern Vagrant images are defined with an embedded Vagrantfile, which
# sets a base_mac (from Packer); absence of this is an error even though back
# in 2014 mitchellh said they're not sure it's even needed any more.
#
# The initialize method takes the 3 most common attributes, use .with() to add
# anything else needed.
#
# MAC addresses are random, so far seen all 080027 OUI, even though that's
# "PCS Systemtechnik GmbH" per the IEEE registry (<http://standards-oui.ieee.org/oui.txt>).
# We stick to the pattern.
#
# Vagrant defaults to `bash -l` for the commands it runs itself (not `vagrant ssh`)
# so OSes which lack bash by default should override shell.

PTMACHINES = [
  # Project-maintained (I think) boxes
  PTMachine.new("jessie", "debian/jessie64", "debian-family"),
  PTMachine.new("stretch", "debian/stretch64", "debian-family").with(:@synctype, "nfs"),  # vboxsf/etc removed, non-free
  PTMachine.new("trusty", "ubuntu/trusty64", "debian-family"),
  PTMachine.new("xenial", "ubuntu/xenial64", "debian-family"),
  PTMachine.new("arch", "archlinux/archlinux", nil),
  PTMachine.new("netbsd7", "netbsd/NetBSD-7.0", nil),

  # Bento boxes maintained by Chef and officially supported by Hashicorp
  PTMachine.new("bento-centos7", "bento/centos-7", nil),
  PTMachine.new("bento-debian9.1", "bento/debian-9.1", "debian-family"),
  PTMachine.new("bento-fedora26", "bento/fedora-26", nil),
  PTMachine.new("bento-freebsd11", "bento/freebsd-11", nil),

  PTMachine.new("laravel-homestead", "laravel/homestead", nil),
    # popular Ubuntu-derived dev image; already updated, do not add our stuff by default [might change]
    # Intended to be used with custom Vagrantfile setup, per ~/src/virtualization/laravel-homestead

  # FreeBSD: <https://forums.freebsd.org/threads/52717/>
  # They do package and OS update on boot, before SSH is available?
  # Note: at present time, sudo is segfaulting
  PTMachine.new("freebsd11.1", "freebsd/FreeBSD-11.1-STABLE", nil)
    .with(:@base_mac, "08002736F355").with(:@shell, "sh").with(:@synctype, "rsync")
    .with(:@vbmodifylist, [
      ["--memory", "1024"],
      ["--cpus", "1"],
      ["--hwvirtex", "on"],
      ["--audio", "none"],
      ["--nictype1", "virtio"],
      ["--nictype2", "virtio"],
    ]),
]

# Derived from https://gist.github.com/juanje/3797297
def local_apt_cache(basebox_name)
  # We did take a second parameter, 'venv', passed from node.vm.env but that
  # led to Vagrant errors, "The following settings shouldn't exist: env"; looks
  # like referencing it auto-vivifies it too early.
  if (/darwin/ =~ RUBY_PLATFORM) != nil
    cache_dir = Pathname.new(ENV['HOME']).join('Library', 'Caches', 'Vagrant')
  elsif ENV.has_key?('XDG_CACHE_HOME')
    cache_dir = Pathname.new(ENV['XDG_CACHE_HOME']).join('Vagrant')
  elsif File.exist?(File.join(ENV['HOME'], '.cache'))
    cache_dir = Pathname.new(ENV['HOME']).join('.cache', 'Vagrant')
  else
    cache_dir = Pathname.new(Vagrant::Environment.new.home_path).join('cache')
  end
  cache_dir = cache_dir.join('apt', basebox_name)
  partial_dir = cache_dir.join('partial')
  partial_dir.mkpath unless partial_dir.exist?
  cache_dir
end

def add_packaging_cache(ptb, node)
  if ptb.mount_args[:disabled]
    return false
  end
  case ptb.ostype
  when "debian-family"
    node.vm.synced_folder local_apt_cache(node.vm.box), "/var/cache/apt/archives/",
      typed_syncargs: { nfs: {
        bsd__nfs_options: ["mapall=#{Process.uid}"],
      } },
      **ptb.mount_args
  end
end

Vagrant.configure(2) do |config|
  PTMACHINES.each_with_index do |ptb, machine_index|
    # NB: Synced folders are done before provision scripts, independent of order defined here.

    config.vm.define ptb.name, autostart: false do |node|
      node.vm.box = ptb.box
      unless ptb.base_mac.nil?
        node.vm.base_mac = ptb.base_mac
      end
      unless ptb.boot_timeout.nil?
        node.vm.boot_timeout = ptb.boot_timeout
      end
      # my ruby meta-programming is near non-existent, or that would already be a loop using a string attr name
      unless ptb.shell.nil?
        node.ssh.shell = ptb.shell
      end
      unless ptb.vbmodifylist.nil?
        config.vm.provider :virtualbox do |vb|
          ptb.vbmodifylist.each do |item, value|
            vb.customize ["modifyvm", :id, item, value]
          end
        end
      end

      node.vm.network "private_network", ip: private_network_ip(machine_index)

      node.vm.synced_folder ".", "/vagrant", **ptb.mount_args
      add_packaging_cache(ptb, node)

      if system("not_at_home")
        config.vm.provision "shell", inline: "touch /tmp/am_not_at_home", name: "Not At Home"
      else
        config.vm.provision "shell", inline: "touch /tmp/am_at_home", name: "At Home"
      end

      unless ptb.ostype.nil?
        config.vm.provision "shell", path: "#{ENV['HOME']}/etc/vagrant/ptlocal.#{ptb.ostype}.sh", name: "pennocktech-local"
      end

      %w(.vimrc .zshrc).each do |fn|
        config.vm.provision "file", source: "~/.personal/reduced/#{fn}", destination: fn
      end

    end # config.vm.define using node as iteration variable
  end # PTMACHINES iteration
end # Vagrant configure
